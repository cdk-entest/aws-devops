AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation with custom resource 
Resources:
  # lambda role 
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaCustomResourcePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:*"
                Resource: "*"
  # lambda function 
  DeviceFarmProjectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Creates, updates, deletes Device  Farm projects"
      Handler: "index.handler"
      Runtime: "python3.6"
      Role: !GetAtt ["LambdaRole", "Arn"]
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3
          http = urllib3.PoolManager()
          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
            responseUrl = event['ResponseURL']
            print(responseUrl)
            responseBody = {}
            responseBody['Status'] = responseStatus
            responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
            responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
            responseBody['StackId'] = event['StackId']
            responseBody['RequestId'] = event['RequestId']
            responseBody['LogicalResourceId'] = event['LogicalResourceId']
            responseBody['NoEcho'] = noEcho
            responseBody['Data'] = responseData

            json_responseBody = json.dumps(responseBody)

            print("Response body:\n" + json_responseBody)

            headers = {
                'content-type' : '',
                'content-length' : str(len(json_responseBody))
            }

            try:
                
                response = http.request('PUT',responseUrl,body=json_responseBody.encode('utf-8'),headers=headers)
                print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing requests.put(..): " + str(e))

          def handler(event, context):
            bucket_name = 'cfn-custom-lambda-create-s3-bucket'
            client = boto3.client("s3", region_name='ap-southeast-1')
            try:
              if event['RequestType'] == 'Delete':
                pass
              if event['RequestType'] == 'Create':
                client.create_bucket(Bucket=bucket_name, CreateBucketConfiguration={'LocationConstraint': 'ap-southeast-1'})
              if event['RequestType'] == 'Update':
                pass
              send(event, context, SUCCESS, {'Arn': bucket_name})
            except:
              send(event, context, FAILED, None, None)

  # custom resource
  DeviceFarmProject:
    Type: Custom::DeviceFarmProject
    Properties:
      ServiceToken: !GetAtt  DeviceFarmProjectFunction.Arn
      ProjectName: "DeviceFarmProjectName"
Outputs:
  LambdaArn:
    Description: lambda arn
    Value:
      !GetAtt DeviceFarmProjectFunction.Arn
  DeviceFarmProjectArn:
    Description: device farm project arn 
    Value:
      !GetAtt DeviceFarmProject.Arn